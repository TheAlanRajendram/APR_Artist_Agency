---
interface Props {
  className?: string;
}

const { className = "" } = Astro.props;
const base = import.meta.env.BASE_URL;
---

<div class={`background-video-container ${className}`}>
  <video
    id="background-video"
    autoplay
    muted
    loop
    playsinline
    preload="auto"
    disablepictureinpicture
    class="background-video md:hidden"
  >
    <source src={`${base}/videos/hero_page.mp4`} type="video/mp4" />
    Your browser does not support the video tag.
  </video>

  <!-- Desktop version with duplicated videos -->
  <div class="hidden md:flex w-full h-full">
    <video
      id="background-video-left"
      autoplay
      muted
      loop
      playsinline
      preload="auto"
      disablepictureinpicture
      class="background-video w-1/2"
    >
      <source src={`${base}/videos/hero_page.mp4`} type="video/mp4" />
    </video>
    <video
      id="background-video-right"
      autoplay
      muted
      loop
      playsinline
      preload="auto"
      disablepictureinpicture
      class="background-video w-1/2 scale-x-[-1]"
    >
      <source src={`${base}/videos/hero_page.mp4`} type="video/mp4" />
    </video>
  </div>
</div>

<style>
  .background-video-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: theme("colors.dark.DEFAULT");
  }

  .background-video {
    height: 100%;
    width: 100%;
    max-width: none;
    object-fit: cover;
    object-position: top center;
    opacity: 0.9;
    filter: brightness(0.8) contrast(1.1);
    pointer-events: none;
    position: relative;
  }
</style>

<script>
  // Function to ensure the background video plays
  function initBackgroundVideo() {
    const videoIds = [
      "background-video",
      "background-video-left",
      "background-video-right"
    ];

    videoIds.forEach((id) => {
      const video = document.getElementById(id) as HTMLVideoElement;

      if (video) {
        // Try to play the video automatically
        const playPromise = video.play();

        if (playPromise !== undefined) {
          playPromise.catch((error) => {
            console.warn(
              `Auto-play was prevented for ${id}. Muting video and trying again.`,
              error
            );
            video.muted = true;
            video
              .play()
              .catch((e) => console.error(`Still cannot play video ${id}:`, e));
          });
        }

        // Reload video if it stalls
        video.addEventListener("stalled", () => {
          console.warn(`Video ${id} stalled. Attempting to reload.`);
          video.load();
          video
            .play()
            .catch((e) =>
              console.error(`Error playing video ${id} after stall:`, e)
            );
        });
      }
    });
  }

  // Initialize on both DOMContentLoaded and astro:page-load to handle both initial load and transitions
  document.addEventListener("DOMContentLoaded", initBackgroundVideo);
  document.addEventListener("astro:page-load", initBackgroundVideo);
</script>
