---
interface Props {
  className?: string;
}

const { className = "" } = Astro.props;
const base = import.meta.env.BASE_URL;
---

<div class={`background-video-container ${className}`}>
  <div class="blurred-background"></div>
  <video
    id="background-video"
    autoplay
    muted
    loop
    playsinline
    preload="auto"
    disablepictureinpicture
    class="background-video"
  >
    <source src={`${base}/videos/hero_page.mp4`} type="video/mp4" />
    Your browser does not support the video tag.
  </video>
</div>

<style>
  .background-video-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .blurred-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: url('') no-repeat center center;
    background-size: cover;
    filter: blur(20px) brightness(0.5);
    z-index: 0;
  }

  .background-video {
    height: 100%;
    max-width: 100%;
    aspect-ratio: 4/3;
    object-fit: cover;
    object-position: center center;
    opacity: 0.9;
    filter: brightness(0.8) contrast(1.1);
    pointer-events: none;
    z-index: 1;
    position: relative;
  }
</style>

<script>
  // Ensure video autoplays even if browser policies are strict
  document.addEventListener('DOMContentLoaded', () => {
    const video = document.getElementById('background-video') as HTMLVideoElement;
    const blurredBg = document.querySelector('.blurred-background') as HTMLElement;

    if (video && blurredBg) {
      // Set the blurred background to use the same video source
      const videoSource = video.querySelector('source')?.getAttribute('src');
      if (videoSource) {
        blurredBg.style.backgroundImage = `url(${videoSource.replace('.mp4', '.jpg')})`;
      }

      // Try to play the video automatically
      const playPromise = video.play();

      if (playPromise !== undefined) {
        playPromise.catch(error => {
          console.warn('Auto-play was prevented. Muting video and trying again.', error);
          video.muted = true;
          video.play().catch(e => console.error('Still cannot play video:', e));
        });
      }

      // Reload video if it stalls
      video.addEventListener('stalled', () => {
        console.warn('Video stalled. Attempting to reload.');
        video.load();
        video.play().catch(e => console.error('Error playing video after stall:', e));
      });

      // Use the first frame as background when video is loaded
      video.addEventListener('loadeddata', () => {
        // Create a canvas to capture the first frame
        const canvas = document.createElement('canvas');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const ctx = canvas.getContext('2d');
        if (ctx) {
          ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
          try {
            // Use the canvas image as the background
            const dataUrl = canvas.toDataURL('image/jpeg');
            blurredBg.style.backgroundImage = `url(${dataUrl})`;
          } catch (e) {
            console.error('Could not create data URL:', e);
          }
        }
      });
    }
  });
</script>
