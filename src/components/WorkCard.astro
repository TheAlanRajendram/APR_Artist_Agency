---
// src/components/WorkCard.astro
import type { CollectionEntry } from "astro:content";
import LazyImage from "./LazyImage.astro";

interface Props {
  item: CollectionEntry<"work">;
  class?: string;
  loading?: "lazy" | "eager";
}

const { item, class: className, loading = "lazy" } = Astro.props;
const { slug, data } = item;
const { title, image, brand, artist, tags, date, video } = data;
---

<a
  href={`/work/${slug}`}
  class:list={[
    "group block overflow-hidden rounded-lg transition-transform duration-300 ease-in-out hover:scale-105",
    className
  ]}
>
  <div class="relative">
    <LazyImage
      src={image}
      alt={title}
      class="w-full h-auto transition-opacity duration-300"
      loading={loading}
      width={400}
      height={300}
    />

    {
      video && (
        <video
          class="absolute inset-0 w-full h-full object-cover opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"
          muted
          loop
          playsinline
          preload="metadata"
        >
          <source src={video} type="video/mp4" />
        </video>
      )
    }

    <div
      class="absolute bottom-0 left-0 right-0 p-4 md:p-6 text-white shadow-card bg-black/60"
    >
      <h3
        class="text-lg md:text-xl font-bold font-display mb-2 group-hover:text-primary transition-colors"
      >
        {title}
      </h3>
      <p class="text-sm text-gray-300 mb-2">
        {brand} &times; {artist}
      </p>
      <p class="text-xs text-gray-400 mb-3">
        {
          new Date(date).toLocaleDateString("en-US", {
            year: "numeric",
            month: "short",
            day: "numeric"
          })
        }
      </p>
      {
        tags && tags.length > 0 && (
          <div class="flex flex-wrap gap-2">
            {tags.slice(0, 2).map((tag) => (
              <span class="bg-white/10 backdrop-blur-sm px-2 py-1 rounded-full text-xs text-white border border-white/20">
                {tag}
              </span>
            ))}
          </div>
        )
      }
    </div>
  </div>
</a>

{video && (
  <script>
    // Extend Window for global properties
    interface MyWindow extends Window {
      videoCardObserver?: IntersectionObserver;
      videoAutoplayUnlocked?: boolean;
    }
    declare let window: MyWindow;

    const setupDesktopHover = () => {
      // Clean up observer if it exists from a previous mobile view
      if (window.videoCardObserver) {
        window.videoCardObserver.disconnect();
      }

      document.querySelectorAll('a[href*="/work/"]').forEach(card => {
        const video = card.querySelector('video');
        if (!video) return;

        const playVideo = async () => {
          try {
            await video.play();
            video.style.opacity = '1';
          } catch (err) { /* Autoplay was prevented. */ }
        };

        const pauseVideo = () => {
          video.pause();
          video.currentTime = 0;
          video.style.opacity = '0';
        };

        card.addEventListener('mouseenter', playVideo);
        card.addEventListener('mouseleave', pauseVideo);
      });
    };

    const setupMobileObserver = () => {
      // --- One-time setup for mobile ---
      if (typeof window.videoAutoplayUnlocked === 'undefined') {
        window.videoAutoplayUnlocked = false; // Locked by default on mobile
        const unlockAutoplay = () => {
          window.videoAutoplayUnlocked = true;
          document.removeEventListener('touchstart', unlockAutoplay);
        };
        document.addEventListener('touchstart', unlockAutoplay, { once: true, passive: true });
      }

      if (!window.videoCardObserver) {
        window.videoCardObserver = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              const video = entry.target.querySelector('video');
              if (!video) return;

              const playVideo = async () => {
                // Check for unlock right before playing
                if (window.videoAutoplayUnlocked) {
                  try {
                    await video.play();
                    video.style.opacity = '1';
                  } catch (err) { /* Autoplay was prevented */ }
                }
              };

              const pauseVideo = () => {
                video.pause();
                video.currentTime = 0;
                video.style.opacity = '0';
              };

              if (entry.isIntersecting) {
                playVideo();
              } else {
                pauseVideo();
              }
            });
          },
          { threshold: 0.5 }
        );
      }

      // --- Per-page logic for mobile ---
      const observer = window.videoCardObserver;
      observer.disconnect();

      document.querySelectorAll('a[href*="/work/"]').forEach((card) => {
        if (card.querySelector('video')) {
          observer.observe(card);
        }
      });
    };

    const initVideoCards = () => {
      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      if (isMobile) {
        setupMobileObserver();
      } else {
        setupDesktopHover();
      }
    };

    // astro:page-load fires on initial page load and after every client-side navigation
    document.addEventListener('astro:page-load', initVideoCards);
  </script>
)}
