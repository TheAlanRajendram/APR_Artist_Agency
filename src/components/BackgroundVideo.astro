---
interface Props {
  className?: string;
}

const { className = "" } = Astro.props;
const base = import.meta.env.BASE_URL;
---

<div class={`background-video-container ${className}`}>
  <div class="video-area">
    <video
      id="background-video"
      autoplay
      muted
      loop
      playsinline
      preload="auto"
      disablepictureinpicture
      class="background-video"
    >
      <source src={`${base}/videos/hero_page.mp4`} type="video/mp4" />
      Your browser does not support the video tag.
    </video>
  </div>
  <div class="content-area">
    <slot />
  </div>
</div>

<style>
  .background-video-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
    overflow: hidden;
    background-color: theme("colors.dark.DEFAULT"); /* Fallback background */
    /* display: flex and flex-direction removed from base, will be added in landscape query */
  }

  .video-area {
    position: absolute; /* Full screen by default for portrait */
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1; /* Behind content-area */
  }

  .background-video {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    object-fit: cover;
    object-position: top center;
    opacity: 0.9;
    filter: brightness(0.5) contrast(1.1);
    pointer-events: none;
  }

  .content-area {
    /* Default (Portrait): Overlay content */
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex; /* Make it visible and use flex for content alignment */
    flex-direction: column;
    justify-content: center; /* Center content vertically */
    align-items: center; /* Center content horizontally */
    padding: 2rem;
    color: #fff;
    z-index: 5; /* Ensure content is above video-area */
  }

  @media (orientation: landscape) {
    .background-video-container {
      display: flex; /* Enable flex for side-by-side layout */
      flex-direction: row-reverse; /* Video on the right, content on the left */
    }

    .video-area {
      position: relative; /* Becomes a flex item, override absolute positioning */
      flex: 0 0 60%; /* Video takes 60% of the width */
      /* width and height are now controlled by flex basis and container height */
      /* z-index: 1 from default is fine */
    }

    .content-area {
      position: relative; /* Becomes a flex item, override absolute positioning */
      flex: 1 1 40%; /* Takes the remaining 40% */
      /* top, left, width, height from portrait mode are overridden by flex properties */
      /* z-index: 5 from default is fine */
      /* Other properties like padding, color, display:flex, align/justify items are inherited or still apply well */
    }
  }
</style>

<script>
  // Function to ensure the background video plays
  function initBackgroundVideo() {
    const video = document.getElementById(
      "background-video"
    ) as HTMLVideoElement;

    if (video) {
      // Try to play the video automatically
      const playPromise = video.play();

      if (playPromise !== undefined) {
        playPromise.catch((error) => {
          console.warn(
            "Auto-play was prevented. Muting video and trying again.",
            error
          );
          video.muted = true;
          video
            .play()
            .catch((e) => console.error("Still cannot play video:", e));
        });
      }

      // Reload video if it stalls
      video.addEventListener("stalled", () => {
        console.warn("Video stalled. Attempting to reload.");
        video.load();
        video
          .play()
          .catch((e) => console.error("Error playing video after stall:", e));
      });
    }
  }

  // Initialize on both DOMContentLoaded and astro:page-load to handle both initial load and transitions
  document.addEventListener("DOMContentLoaded", initBackgroundVideo);
  document.addEventListener("astro:page-load", initBackgroundVideo);
</script>
