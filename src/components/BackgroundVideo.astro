---
interface Props {
  className?: string;
  src?: string | null;
}

const { className = "" } = Astro.props;
const videoSrc = Astro.props.src || "/videos/heroVideo.mp4";
---

<div class={`background-video-container ${className}`}>
  <div class="video-area">
    <video
      id="background-video"
      autoplay
      muted
      loop
      playsinline
      preload="metadata"
      disablepictureinpicture
      class="background-video"
      poster="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1920 1080'%3E%3Crect width='1920' height='1080' fill='%23000'/%3E%3C/svg%3E"
    >
      <source src={videoSrc} type="video/mp4" />
      Your browser does not support the video tag.
    </video>
  </div>
  <div class="content-area">
    <slot />
  </div>
</div>

<style>
  .background-video-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%; /* Full screen for portrait, overridden in landscape */
    z-index: 0;
    overflow: hidden;
    background-color: theme("colors.dark.DEFAULT");
  }

  .video-area {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1;
  }

  .background-video {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    object-fit: cover;
    object-position: bottom 10px center;
    opacity: 0.9;
    filter: brightness(0.6) contrast(1.1);
    pointer-events: none;
  }

  .content-area {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 2rem;
    color: theme("textColor.primary");
    z-index: 5;
    position: relative;
  }

  @media (orientation: landscape) {
    .background-video-container {
      /* position: absolute; is inherited */
      top: 81px; /* Navbar height */
      height: calc(100vh - 81px); /* Full height minus navbar */
      /* left: 0; and width: 100%; are inherited */
      display: flex;
      flex-direction: row-reverse;
    }

    .video-area {
      position: relative; /* Becomes a flex item */
      flex: 0 0 60%;
      height: 100%;
      /* z-index: 1 is inherited, top/left/width overridden by flex */
    }

    .content-area {
      position: relative; /* Becomes a flex item */
      flex: 1 1 40%;
      height: 100%;
      /* padding, color, display:flex, align/justify items are inherited */
      /* z-index: 5 is inherited, top/left/width overridden by flex */
    }
  }
</style>

<script>
  // Function to ensure the background video plays
  function initBackgroundVideo() {
    const video = document.getElementById(
      "background-video"
    ) as HTMLVideoElement;

    if (video) {
      // Try to play the video automatically
      const playPromise = video.play();

      if (playPromise !== undefined) {
        playPromise.catch((error) => {
          console.warn(
            "Auto-play was prevented. Muting video and trying again.",
            error
          );
          video.muted = true;
          video
            .play()
            .catch((e) => console.error("Still cannot play video:", e));
        });
      }

      // Reload video if it stalls
      video.addEventListener("stalled", () => {
        console.warn("Video stalled. Attempting to reload.");
        video.load();
        video
          .play()
          .catch((e) => console.error("Error playing video after stall:", e));
      });
    }
  }

  // Initialize on both DOMContentLoaded and astro:page-load to handle both initial load and transitions
  document.addEventListener("DOMContentLoaded", initBackgroundVideo);
  document.addEventListener("astro:page-load", initBackgroundVideo);
</script>
