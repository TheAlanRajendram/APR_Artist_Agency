---
import Footer from "../components/Footer.astro";
import SocialLinks from "../components/SocialLinks.astro";
import { ViewTransitions } from "astro:transitions";
import "../styles/lazyAnimations.css";

interface Props {
  title: string;
  transparentNavbar?: boolean;
}

const { title, transparentNavbar = false } = Astro.props;
---

<!doctype html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, viewport-fit=cover"
    />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="color-scheme" content="dark" />
    <meta name="theme-color" content="#0B0E11" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta
      name="apple-mobile-web-app-status-bar-style"
      content="black-translucent"
    />
    <link rel="dns-prefetch" href="//cdn.jsdelivr.net" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&family=Cormorant+Infant:ital,wght@0,400;0,600;0,700;1,400;1,600&display=swap"
      rel="stylesheet"
    />
    <!-- Preload hero video for instant playback -->
    {
      title === "Home" && (
        <link
          rel="preload"
          href="/videos/hero_page.mp4"
          as="video"
          type="video/mp4"
          fetchpriority="high"
        />
      )
    }
    <title>{title} | APR Artist Agency</title>
    <ViewTransitions />

    <!-- Critical CSS for above-the-fold content -->
    <style>
      /* Critical styles for hero section */
      .hero-section {
        min-height: 100vh;
        background-color: theme("colors.dark.lighter");
        position: relative;
      }

      /* Critical typography */
      .text-4xl {
        font-size: 2.25rem;
        line-height: 2.5rem;
      }
      .font-bold {
        font-weight: 700;
      }
      .font-serif {
        font-family: "Cormorant Infant", serif;
      }
      .text-center {
        text-align: center;
      }
      .text-heading {
        color: theme("colors.gold");
      }
      .text-heading-secondary {
        color: theme("textColor.primary");
      }
      .italic {
        font-style: italic;
      }
      .font-black {
        font-weight: 900;
      }
      .font-medium {
        font-weight: 500;
      }

      /* Critical layout */
      .container {
        max-width: 1200px;
        margin: 0 auto;
      }
      .mx-auto {
        margin-left: auto;
        margin-right: auto;
      }
      .px-4 {
        padding-left: 1rem;
        padding-right: 1rem;
      }
      .py-20 {
        padding-top: 5rem;
        padding-bottom: 5rem;
      }
      .relative {
        position: relative;
      }
      .flex {
        display: flex;
      }
      .items-center {
        align-items: center;
      }
      .justify-center {
        justify-content: center;
      }
      .mb-2 {
        margin-bottom: 0.5rem;
      }
      .mx-4 {
        margin-left: 1rem;
        margin-right: 1rem;
      }

      /* Critical background video styles */
      .background-video {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        opacity: 0.9;
        filter: brightness(0.6) contrast(1.1);
      }

      /* Critical animation */
      .animate-fade-in {
        animation: fadeIn 1s ease-out forwards;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }

      @media (min-width: 768px) {
        .md\\:text-4xl {
          font-size: 2.25rem;
          line-height: 2.5rem;
        }
        .md\\:py-36 {
          padding-top: 9rem;
          padding-bottom: 9rem;
        }
      }
    </style>

    <script>
      // Force dark mode only, no theme switching
      document.documentElement.classList.add("dark");
      localStorage.setItem("theme", "dark");
    </script>
  </head>
  <body class="bg-dark text-primary min-h-screen flex flex-col">
    <header
      class={`py-4 border-b border-primary ${transparentNavbar ? "absolute top-0 left-0 right-0 z-40 bg-transparent" : "bg-dark shadow-md"}`}
    >
      <div class="container mx-auto px-4 relative">
        <nav class="flex items-center justify-between">
          <a
            href="/"
            class="flex items-center"
            aria-label="APR Artist Agency Home"
          >
            <img
              src="/logo_gold.png"
              alt="APR Artist Agency Logo"
              style="height: 48px;"
              class="mr-3"
              loading="eager"
              width="72"
              height="48"
            />
          </a>
          <div class="hidden md:flex space-x-6 items-center relative z-10">
            <a
              href="/about"
              class="hover:text-primary transition-colors py-2 px-1 cursor-pointer"
              >About</a
            >
            <a
              href="/services"
              class="hover:text-primary transition-colors py-2 px-1 cursor-pointer"
              >Services</a
            >
            <a
              href="/work"
              class="hover:text-primary transition-colors py-2 px-1 cursor-pointer"
              >Work</a
            >
            <a
              href="mailto:info@apr-artistagency.com"
              class="border border-primary text-primary px-5 py-2 rounded-full hover:bg-primary hover:text-on-primary transition-colors font-medium inline-flex items-center cursor-pointer"
              >Get in touch</a
            >
          </div>
          <button
            id="mobile-menu-button"
            class="md:hidden p-2 hover:text-primary transition-colors relative z-50 touch-manipulation"
            aria-label="Toggle mobile menu"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
          </button>
        </nav>
        <!-- Mobile menu -->
        <div
          id="mobile-menu"
          class="md:hidden hidden fixed inset-0 bg-dark-lighter bg-opacity-95 z-[9999] flex flex-col items-center justify-center"
        >
          <button
            id="close-menu-button"
            class="absolute top-6 right-6 p-2 text-primary hover:text-primary transition-colors"
            aria-label="Close menu"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-8 w-8"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                Â¢
                stroke-width="2"
                d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
          <div class="py-8 space-y-8 text-center w-full max-w-md">
            <a
              href="/about"
              class="block hover:text-primary transition-colors text-4xl font-serif font-medium py-3 border-b border-dark-accent"
              >About</a
            >
            <a
              href="/services"
              class="block hover:text-primary transition-colors text-4xl font-serif font-medium py-3 border-b border-dark-accent"
              >Services</a
            >
            <a
              href="/work"
              class="block hover:text-primary transition-colors text-4xl font-serif font-medium py-3 border-b border-dark-accent"
              >Work</a
            >
            <a
              href="mailto:info@apr-artistagency.com"
              class="flex items-center border border-primary text-2xl text-primary px-6 py-2 rounded-full hover:bg-primary hover:text-on-primary transition-colors font-medium mx-auto w-max mt-6"
              >Get in touch</a
            >
            <!-- Social Media Links in Mobile Menu -->
            <div class="flex justify-center pt-4">
              <SocialLinks />
            </div>
          </div>
        </div>
      </div>
    </header>

    <main class="flex-grow content-lazy-container">
      <slot />
    </main>

    <Footer />

    <style>
      /* Global styles for page background */
      :global(body),
      :global(html) {
        background: theme("colors.dark.DEFAULT");
        color-scheme: dark;
      }

      /* Force dark mode scrollbars in supported browsers */
      :global(*) {
        scrollbar-color: theme("colors.dark.accent")
          theme("colors.dark.DEFAULT");
      }

      /* Add primary accent to active page links */
      :global(.active-link) {
        color: theme("colors.primary.DEFAULT");
        position: relative;
      }

      :global(.active-link::after) {
        content: "";
        position: absolute;
        bottom: -4px;
        left: 0;
        width: 100%;
        height: 2px;
        background-color: theme("colors.primary.DEFAULT");
      }

      /* Mobile menu animation */
      #mobile-menu {
        transition:
          opacity 0.3s ease-in-out,
          visibility 0.3s ease-in-out;
        opacity: 0;
        visibility: hidden;
        backdrop-filter: blur(4px);
      }

      #mobile-menu:not(.hidden) {
        opacity: 1;
        visibility: visible;
      }

      #mobile-menu a {
        position: relative;
        transition: transform 0.2s;
      }

      #mobile-menu a:hover {
        transform: translateY(-2px);
      }

      /* Prevent scrolling when menu is open */
      :global(body.menu-open) {
        overflow: hidden;
        position: fixed;
        width: 100%;
        height: 100%;
      }

      /* Ensure navigation links are always clickable */
      nav a {
        position: relative;
        z-index: 10;
        display: block;
        text-decoration: none;
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        -webkit-tap-highlight-color: transparent;
      }

      /* Improve mobile menu button interaction */
      #mobile-menu-button {
        -webkit-touch-callout: none;
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        -webkit-tap-highlight-color: transparent;
        touch-action: manipulation;
      }

      /* Ensure mobile menu is above everything */
      #mobile-menu {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 9999;
      }
    </style>

    <script defer>
      // Initialize global lazy loading enhancement with slight delay for better performance
      const initLazyFeatures = () => {
        import("../scripts/enhanceLazyLoading.js").then((module) => {
          if (module.initAllLazyLoading) {
            module.initAllLazyLoading();
          }
        });

        // Initialize lazy animations
        import("../scripts/lazyAnimations.js").then((module) => {
          if (module.initLazyAnimations) {
            module.initLazyAnimations();
          }
        });
      };

      // Use requestIdleCallback with fallback for older browsers
      if ("requestIdleCallback" in window) {
        requestIdleCallback(initLazyFeatures, { timeout: 2000 });
      } else {
        setTimeout(initLazyFeatures, 100);
      }

      // Global variables to track current event listeners
      let mobileMenuInitialized = false;
      let currentEventListeners = [];

      // Helper function to remove all current event listeners
      function removeAllEventListeners() {
        currentEventListeners.forEach(({ element, event, handler }) => {
          if (element) {
            element.removeEventListener(event, handler);
          }
        });
        currentEventListeners = [];
      }

      // Helper function to add tracked event listeners
      function addTrackedEventListener(element, event, handler) {
        if (element) {
          element.addEventListener(event, handler);
          currentEventListeners.push({ element, event, handler });
        }
      }

      // Listen for astro:page-load event instead of DOMContentLoaded
      document.addEventListener("astro:page-load", () => {
        // Clean up previous event listeners to prevent accumulation
        removeAllEventListeners();

        // Mobile menu functionality
        const mobileMenuButton = document.getElementById("mobile-menu-button");
        const closeMenuButton = document.getElementById("close-menu-button");
        const mobileMenu = document.getElementById("mobile-menu");
        const body = document.body;

        // Navbar transparency handling
        const header = document.querySelector("header");
        const isTransparentNavbar =
          header?.classList.contains("bg-transparent");

        if (isTransparentNavbar && header) {
          // Scroll handler for transparent navbar
          const scrollHandler = () => {
            if (window.scrollY > 50) {
              header.classList.remove("bg-transparent");
              header.classList.add(
                "bg-dark",
                "shadow-md",
                "transition-all",
                "duration-300"
              );
            } else {
              header.classList.add("bg-transparent");
              header.classList.remove("bg-dark", "shadow-md");
            }
          };

          addTrackedEventListener(window, "scroll", scrollHandler);
        }

        // Mobile menu state management
        let isMenuOpen = false;
        let menuAnimationTimeout = null;

        function openMenu() {
          if (mobileMenu && !isMenuOpen) {
            isMenuOpen = true;

            // Clear any pending animation timeout
            if (menuAnimationTimeout) {
              clearTimeout(menuAnimationTimeout);
              menuAnimationTimeout = null;
            }

            // Prevent background scrolling
            body.classList.add("menu-open");

            // Show menu immediately
            mobileMenu.classList.remove("hidden");
            mobileMenu.style.opacity = "1";
            mobileMenu.style.visibility = "visible";
          }
        }

        function closeMenu() {
          if (mobileMenu && isMenuOpen) {
            isMenuOpen = false;

            // Clear any pending animation timeout
            if (menuAnimationTimeout) {
              clearTimeout(menuAnimationTimeout);
            }

            // Re-enable scrolling
            body.classList.remove("menu-open");

            // Start hide animation
            mobileMenu.style.opacity = "0";
            mobileMenu.style.visibility = "hidden";

            // Hide menu after animation completes
            menuAnimationTimeout = setTimeout(() => {
              if (mobileMenu && !isMenuOpen) {
                mobileMenu.classList.add("hidden");
              }
              menuAnimationTimeout = null;
            }, 300); // Match the CSS transition time
          }
        }

        // Mobile menu button handlers
        if (mobileMenuButton && mobileMenu) {
          addTrackedEventListener(mobileMenuButton, "click", (e) => {
            e.preventDefault();
            e.stopPropagation();
            openMenu();
          });

          // Close menu button
          if (closeMenuButton) {
            addTrackedEventListener(closeMenuButton, "click", (e) => {
              e.preventDefault();
              e.stopPropagation();
              closeMenu();
            });
          }

          // Close mobile menu when clicking outside
          const outsideClickHandler = (event) => {
            const target = event.target;
            if (
              isMenuOpen &&
              mobileMenu &&
              !mobileMenuButton.contains(target) &&
              !mobileMenu.contains(target)
            ) {
              closeMenu();
            }
          };

          addTrackedEventListener(document, "click", outsideClickHandler);

          // Close mobile menu when clicking a navigation link
          const mobileMenuLinks = mobileMenu.querySelectorAll("a");
          mobileMenuLinks.forEach((link) => {
            addTrackedEventListener(link, "click", () => {
              // Small delay to allow navigation to start before closing menu
              setTimeout(closeMenu, 50);
            });
          });

          // Handle escape key to close menu
          const escapeHandler = (event) => {
            if (event.key === "Escape" && isMenuOpen) {
              closeMenu();
            }
          };

          addTrackedEventListener(document, "keydown", escapeHandler);
        }

        // Mark current page as active
        const currentPath = window.location.pathname;
        const navLinks = document.querySelectorAll(
          'nav a[href]:not([aria-label="APR Artist Agency Home"])'
        );

        navLinks.forEach((link) => {
          const href = link.getAttribute("href");
          // Remove active class from all links first
          link.classList.remove("active-link");

          // Add active class to current page link
          if (
            href &&
            (currentPath === href ||
              (href !== "/" && currentPath.startsWith(href)))
          ) {
            link.classList.add("active-link");
          }
        });
      });

      // Force dark mode only, no theme switching
      document.documentElement.classList.add("dark");
      localStorage.setItem("theme", "dark");
    </script>
  </body>
</html>
