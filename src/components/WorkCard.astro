---
// src/components/WorkCard.astro
import type { CollectionEntry } from "astro:content";
import LazyImage from "./LazyImage.astro";

interface Props {
  item: CollectionEntry<"work">;
  class?: string;
  loading?: "lazy" | "eager";
}

const { item, class: className, loading = "lazy" } = Astro.props;
const { slug, data } = item;
const { title, image, brand, artist, tags, date, video } = data;
---

<a
  href={`/work/${slug}`}
  class:list={[
    "group block overflow-hidden rounded-lg transition-transform duration-300 ease-in-out hover:scale-105",
    className
  ]}
>
  <div class="relative">
    <LazyImage
      src={image}
      alt={title}
      class="w-full h-auto transition-opacity duration-300"
      loading={loading}
    />

    {
      video && (
        <video
          class="absolute inset-0 w-full h-full object-cover opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none"
          muted
          loop
          preload="metadata"
        >
          <source src={video} type="video/mp4" />
        </video>
      )
    }

    <div
      class="absolute bottom-0 left-0 right-0 p-4 md:p-6 text-white shadow-card bg-black/60"
    >
      <h3
        class="text-lg md:text-xl font-bold font-display mb-2 group-hover:text-primary transition-colors"
      >
        {title}
      </h3>
      <p class="text-sm text-gray-300 mb-2">
        {brand} &times; {artist}
      </p>
      <p class="text-xs text-gray-400 mb-3">
        {
          new Date(date).toLocaleDateString("en-US", {
            year: "numeric",
            month: "short",
            day: "numeric"
          })
        }
      </p>
      {
        tags && tags.length > 0 && (
          <div class="flex flex-wrap gap-2">
            {tags.slice(0, 2).map((tag) => (
              <span class="bg-white/10 backdrop-blur-sm px-2 py-1 rounded-full text-xs text-white border border-white/20">
                {tag}
              </span>
            ))}
          </div>
        )
      }
    </div>
  </div>
</a>

{video && (
  <script>
    document.addEventListener('astro:page-load', () => {
      const cards = document.querySelectorAll('a[href*="/work/"]');
      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

      cards.forEach(card => {
        const video = card.querySelector('video');
        if (!video) return;

        if (isMobile) {
          // Mobile: Use Intersection Observer for auto-play when in focus
          const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                video.play();
              } else {
                video.pause();
                video.currentTime = 0;
              }
            });
          }, {
            threshold: 0.5 // Play when 50% of the card is visible
          });

          observer.observe(card);
        } else {
          // Desktop: Use hover events
          card.addEventListener('mouseenter', () => {
            video.play();
          });

          card.addEventListener('mouseleave', () => {
            video.pause();
            video.currentTime = 0;
          });
        }

        // Prevent video from interfering with link clicks
        video.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
        });
      });
    });
  </script>
)}
