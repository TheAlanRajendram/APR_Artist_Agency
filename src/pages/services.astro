---
import BaseLayout from "../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import { marked } from "marked";

// Helper function to create URL-friendly slugs
function slugify(text) {
  if (!text) return "";
  return text
    .toString()
    .toLowerCase()
    .trim()
    .replace(/\s+/g, "-") // Replace spaces with -
    .replace(/[^\w-]+/g, "") // Remove all non-word chars
    .replace(/--+/g, "-") // Replace multiple - with single -
    .replace(/^-+/, "") // Trim - from start of text
    .replace(/-+$/, ""); // Trim - from end of text
}

// Get all services and sort by order
const services = await getCollection("services");
const sortedServices = services.sort((a, b) => a.data.order - b.data.order);

// Prepare services: add ID for linking and compile markdown
sortedServices.forEach((service) => {
  service.data.id = slugify(service.data.title); // Add an ID for linking
  service.compiledContent = marked.parse(service.body);
});
---

<BaseLayout title="Services">
  <section class="services-main relative">
    <!-- Scroll indicator (can be kept or removed based on new design preference) -->
    <div
      class="fixed right-12 top-1/2 transform -translate-y-1/2 z-[60] hidden lg:block"
    >
      <div
        class="text-gold font-light tracking-widest text-sm rotate-90 origin-center"
      >
        Scroll
      </div>
    </div>

    {/* --- NEW STICKY TABLE OF CONTENTS HEADER --- */}
    <div
      id="services-toc-header"
      class="sticky top-0 z-50 bg-neutral-800 text-white shadow-md"
    >
      <div class="container mx-auto px-8 py-4">
        <h2 class="text-xl font-semibold mb-2 text-gold">Our Services</h2>
        <ul class="flex flex-wrap gap-x-4 gap-y-2 text-sm">
          {
            sortedServices.map((service) => (
              <li>
                <a
                  href={`#${service.data.id}`}
                  data-target-id={service.data.id}
                  class="toc-link hover:text-gold transition-colors duration-200 pb-1"
                >
                  {service.data.title}
                </a>
              </li>
            ))
          }
        </ul>
      </div>
    </div>
    {/* --- END NEW STICKY TABLE OF CONTENTS HEADER --- */}

    {/* --- REMOVED OLD HERO SECTION --- */}
    {/* <div class="hero-section h-screen flex items-center"> ... </div> */}

    <!-- Services sections -->
    <div class="services-container relative">
      {/* Dynamic padding will still be applied by JS */}
      {
        sortedServices.map((service, index) => (
          // Add the generated ID to the wrapper
          <div
            class="service-sticky-wrapper border-t border-gray-800"
            data-index={index}
            id={service.data.id}
          >
            {" "}
            <div class="service-section-content py-24 w-full reveal-animation">
              {" "}
              <div class="service-content h-full w-full flex items-center">
                <div class="container mx-auto px-8">
                  <div class="flex flex-col md:flex-row">
                    <div class="md:w-1/4 mb-8 md:mb-0">
                      {/* <div class="text-4xl md:text-6xl font-bold text-gold opacity-80">
                        {(index + 1).toString().padStart(2, "0")}
                      </div> */}
                    </div>
                    <div class="md:w-3/4">
                      <h2 class="text-3xl md:text-4xl font-bold mb-8 text-gold font-serif">
                        {service.data.title}
                      </h2>
                      <div
                        class="prose prose-invert prose-lg max-w-3xl"
                        set:html={service.compiledContent}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </section>
</BaseLayout>

<style>
  .services-main {
    background-color: rgb(17, 17, 17);
    color: white;
  }

  /* Style for the sticky TOC header */
  #services-toc-header {
    /* background-color: rgb(25, 25, 25); */ /* Example: slightly different from main bg */
    /* Using bg-neutral-800 from Tailwind above */
  }

  .toc-link.active {
    color: var(--color-gold);
    font-weight: 600;
    border-bottom: 2px solid var(--color-gold);
  }

  /* .hero-section removed */

  .services-container {
    position: relative;
  }

  .service-sticky-wrapper {
    position: relative;
    background-color: rgb(17, 17, 17);
    color: white;
    /* Ensure content starts below the sticky TOC header if not using scroll-padding */
    /* scroll-margin-top can be set dynamically or to a fixed value */
  }

  .service-sticky-wrapper.sticky {
    position: sticky;
    top: 0; /* This makes the section content itself sticky at the very top if we want that stacking */
    /* We might want this to be sticky *below* the TOC header for the reveal effect */
    z-index: calc(2 + var(--index, 0));
  }

  .service-section-content {
    position: relative;
    opacity: 0;
    transform: translateY(50px);
    transition:
      opacity 0.8s ease,
      transform 0.8s ease;
  }

  .service-sticky-wrapper.active .service-section-content {
    opacity: 1;
    transform: translateY(0);
  }

  .prose h3 {
    font-size: 1.5rem;
    line-height: 2rem;
    margin-bottom: 2rem;
    font-weight: 400;
    max-width: 90%;
  }

  .prose ul {
    margin-top: 1.5rem;
    list-style-type: none;
  }

  .prose li {
    margin-bottom: 0.75rem;
    padding-left: 1.5rem;
    position: relative;
  }

  .prose li:before {
    content: "âœ¦";
    position: absolute;
    left: 0;
    color: var(--color-gold);
  }

  .prose p {
    margin-bottom: 1.5rem;
    line-height: 1.8;
  }

  :root {
    --color-gold: #d4af37; /* Ensure gold color is defined */
  }
</style>

<script src="../scripts/servicesPage.js"></script>
